<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="294.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="277" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="277" > </text>
<g id="frames">
<g >
<title>uhci_hub_status_data (1 samples, 0.03%)</title><rect x="372.1" y="69" width="0.3" height="15.0" fill="rgb(217,131,20)" rx="2" ry="2" />
<text  x="375.09" y="79.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1 samples, 0.03%)</title><rect x="593.4" y="37" width="0.3" height="15.0" fill="rgb(240,40,41)" rx="2" ry="2" />
<text  x="596.41" y="47.5" ></text>
</g>
<g >
<title>QRSDet (54 samples, 1.37%)</title><rect x="115.7" y="213" width="16.2" height="15.0" fill="rgb(210,226,38)" rx="2" ry="2" />
<text  x="118.72" y="223.5" ></text>
</g>
<g >
<title>Classify (2 samples, 0.05%)</title><rect x="55.5" y="213" width="0.6" height="15.0" fill="rgb(215,23,49)" rx="2" ry="2" />
<text  x="58.52" y="223.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (2 samples, 0.05%)</title><rect x="371.8" y="149" width="0.6" height="15.0" fill="rgb(227,98,52)" rx="2" ry="2" />
<text  x="374.79" y="159.5" ></text>
</g>
<g >
<title>rh_timer_func (1 samples, 0.03%)</title><rect x="463.4" y="85" width="0.3" height="15.0" fill="rgb(232,206,48)" rx="2" ry="2" />
<text  x="466.43" y="95.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1 samples, 0.03%)</title><rect x="372.1" y="53" width="0.3" height="15.0" fill="rgb(241,36,23)" rx="2" ry="2" />
<text  x="375.09" y="63.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (15 samples, 0.38%)</title><rect x="864.2" y="197" width="4.4" height="15.0" fill="rgb(250,164,38)" rx="2" ry="2" />
<text  x="867.15" y="207.5" ></text>
</g>
<g >
<title>uhci_hub_status_data (1 samples, 0.03%)</title><rect x="593.4" y="53" width="0.3" height="15.0" fill="rgb(211,134,8)" rx="2" ry="2" />
<text  x="596.41" y="63.5" ></text>
</g>
<g >
<title>main (107 samples, 2.72%)</title><rect x="888.7" y="197" width="32.1" height="15.0" fill="rgb(249,222,29)" rx="2" ry="2" />
<text  x="891.71" y="207.5" >main</text>
</g>
<g >
<title>CompareBeats (414 samples, 10.51%)</title><rect x="468.2" y="197" width="124.0" height="15.0" fill="rgb(209,181,35)" rx="2" ry="2" />
<text  x="471.22" y="207.5" >CompareBeats</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1 samples, 0.03%)</title><rect x="463.4" y="37" width="0.3" height="15.0" fill="rgb(217,146,10)" rx="2" ry="2" />
<text  x="466.43" y="47.5" ></text>
</g>
<g >
<title>call_timer_fn (1 samples, 0.03%)</title><rect x="593.4" y="101" width="0.3" height="15.0" fill="rgb(220,20,30)" rx="2" ry="2" />
<text  x="596.41" y="111.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="920.5" y="133" width="0.3" height="15.0" fill="rgb(235,210,26)" rx="2" ry="2" />
<text  x="923.46" y="143.5" ></text>
</g>
<g >
<title>run_timer_softirq (1 samples, 0.03%)</title><rect x="372.1" y="133" width="0.3" height="15.0" fill="rgb(250,65,35)" rx="2" ry="2" />
<text  x="375.09" y="143.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="593.4" y="133" width="0.3" height="15.0" fill="rgb(218,9,51)" rx="2" ry="2" />
<text  x="596.41" y="143.5" ></text>
</g>
<g >
<title>CompareBeats2 (4 samples, 0.10%)</title><rect x="592.2" y="197" width="1.2" height="15.0" fill="rgb(235,120,43)" rx="2" ry="2" />
<text  x="595.21" y="207.5" ></text>
</g>
<g >
<title>uhci_hub_status_data (1 samples, 0.03%)</title><rect x="463.4" y="53" width="0.3" height="15.0" fill="rgb(225,175,20)" rx="2" ry="2" />
<text  x="466.43" y="63.5" ></text>
</g>
<g >
<title>QRSDet (626 samples, 15.89%)</title><rect x="637.4" y="197" width="187.5" height="15.0" fill="rgb(209,110,0)" rx="2" ry="2" />
<text  x="640.44" y="207.5" >QRSDet</text>
</g>
<g >
<title>CompareBeats (1 samples, 0.03%)</title><rect x="593.4" y="197" width="0.3" height="15.0" fill="rgb(219,200,11)" rx="2" ry="2" />
<text  x="596.41" y="207.5" ></text>
</g>
<g >
<title>MinimumBeatVariation (3 samples, 0.08%)</title><rect x="103.4" y="213" width="0.9" height="15.0" fill="rgb(208,58,43)" rx="2" ry="2" />
<text  x="106.44" y="223.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1 samples, 0.03%)</title><rect x="371.8" y="69" width="0.3" height="15.0" fill="rgb(234,116,8)" rx="2" ry="2" />
<text  x="374.79" y="79.5" ></text>
</g>
<g >
<title>AnalyzeBeat (67 samples, 1.70%)</title><rect x="372.7" y="197" width="20.1" height="15.0" fill="rgb(223,214,8)" rx="2" ry="2" />
<text  x="375.69" y="207.5" ></text>
</g>
<g >
<title>Classify (15 samples, 0.38%)</title><rect x="463.7" y="197" width="4.5" height="15.0" fill="rgb(241,206,39)" rx="2" ry="2" />
<text  x="466.73" y="207.5" ></text>
</g>
<g >
<title>call_timer_fn (1 samples, 0.03%)</title><rect x="372.1" y="117" width="0.3" height="15.0" fill="rgb(237,37,44)" rx="2" ry="2" />
<text  x="375.09" y="127.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1 samples, 0.03%)</title><rect x="371.8" y="133" width="0.3" height="15.0" fill="rgb(226,205,52)" rx="2" ry="2" />
<text  x="374.79" y="143.5" ></text>
</g>
<g >
<title>BestMorphMatch (1 samples, 0.03%)</title><rect x="55.2" y="213" width="0.3" height="15.0" fill="rgb(213,149,36)" rx="2" ry="2" />
<text  x="58.22" y="223.5" ></text>
</g>
<g >
<title>ResetPostClassify (1 samples, 0.03%)</title><rect x="854.9" y="197" width="0.3" height="15.0" fill="rgb(240,151,18)" rx="2" ry="2" />
<text  x="857.87" y="207.5" ></text>
</g>
<g >
<title>HFNoiseCheck (43 samples, 1.09%)</title><rect x="594.3" y="197" width="12.9" height="15.0" fill="rgb(242,137,24)" rx="2" ry="2" />
<text  x="597.31" y="207.5" ></text>
</g>
<g >
<title>rcu_gp_kthread_wake (1 samples, 0.03%)</title><rect x="371.8" y="101" width="0.3" height="15.0" fill="rgb(214,100,12)" rx="2" ry="2" />
<text  x="374.79" y="111.5" ></text>
</g>
<g >
<title>memmove@plt (2 samples, 0.05%)</title><rect x="1189.4" y="213" width="0.6" height="15.0" fill="rgb(223,56,31)" rx="2" ry="2" />
<text  x="1192.40" y="223.5" ></text>
</g>
<g >
<title>AnalyzeBeat (103 samples, 2.61%)</title><rect x="10.0" y="213" width="30.8" height="15.0" fill="rgb(243,13,9)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >An..</text>
</g>
<g >
<title>all (3,940 samples, 100%)</title><rect x="10.0" y="245" width="1180.0" height="15.0" fill="rgb(208,72,9)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>CompareBeats2 (156 samples, 3.96%)</title><rect x="56.1" y="213" width="46.7" height="15.0" fill="rgb(207,172,16)" rx="2" ry="2" />
<text  x="59.12" y="223.5" >Comp..</text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="463.4" y="133" width="0.3" height="15.0" fill="rgb(210,51,13)" rx="2" ry="2" />
<text  x="466.43" y="143.5" ></text>
</g>
<g >
<title>deriv1 (67 samples, 1.70%)</title><rect x="868.6" y="197" width="20.1" height="15.0" fill="rgb(218,118,15)" rx="2" ry="2" />
<text  x="871.64" y="207.5" ></text>
</g>
<g >
<title>rcu_report_qs_rnp (1 samples, 0.03%)</title><rect x="371.8" y="117" width="0.3" height="15.0" fill="rgb(236,35,40)" rx="2" ry="2" />
<text  x="374.79" y="127.5" ></text>
</g>
<g >
<title>call_timer_fn (1 samples, 0.03%)</title><rect x="463.4" y="101" width="0.3" height="15.0" fill="rgb(223,66,24)" rx="2" ry="2" />
<text  x="466.43" y="111.5" ></text>
</g>
<g >
<title>NewBeatType (1 samples, 0.03%)</title><rect x="607.2" y="197" width="0.3" height="15.0" fill="rgb(213,28,15)" rx="2" ry="2" />
<text  x="610.19" y="207.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.03%)</title><rect x="593.4" y="149" width="0.3" height="15.0" fill="rgb(216,160,41)" rx="2" ry="2" />
<text  x="596.41" y="159.5" ></text>
</g>
<g >
<title>irq_exit (2 samples, 0.05%)</title><rect x="371.8" y="165" width="0.6" height="15.0" fill="rgb(220,210,33)" rx="2" ry="2" />
<text  x="374.79" y="175.5" ></text>
</g>
<g >
<title>ourtest (3,940 samples, 100.00%)</title><rect x="10.0" y="229" width="1180.0" height="15.0" fill="rgb(211,185,7)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >ourtest</text>
</g>
<g >
<title>swake_up (1 samples, 0.03%)</title><rect x="371.8" y="85" width="0.3" height="15.0" fill="rgb(237,124,21)" rx="2" ry="2" />
<text  x="374.79" y="95.5" ></text>
</g>
<g >
<title>GetBeatTypeCount (1 samples, 0.03%)</title><rect x="594.0" y="197" width="0.3" height="15.0" fill="rgb(225,123,0)" rx="2" ry="2" />
<text  x="597.01" y="207.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (2 samples, 0.05%)</title><rect x="371.8" y="181" width="0.6" height="15.0" fill="rgb(208,201,47)" rx="2" ry="2" />
<text  x="374.79" y="191.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="593.4" y="165" width="0.3" height="15.0" fill="rgb(228,3,45)" rx="2" ry="2" />
<text  x="596.41" y="175.5" ></text>
</g>
<g >
<title>run_timer_softirq (1 samples, 0.03%)</title><rect x="593.4" y="117" width="0.3" height="15.0" fill="rgb(235,175,41)" rx="2" ry="2" />
<text  x="596.41" y="127.5" ></text>
</g>
<g >
<title>usb_hcd_poll_rh_status (1 samples, 0.03%)</title><rect x="372.1" y="85" width="0.3" height="15.0" fill="rgb(251,101,35)" rx="2" ry="2" />
<text  x="375.09" y="95.5" ></text>
</g>
<g >
<title>UpdateBeatType (28 samples, 0.71%)</title><rect x="855.8" y="197" width="8.4" height="15.0" fill="rgb(229,117,10)" rx="2" ry="2" />
<text  x="858.77" y="207.5" ></text>
</g>
<g >
<title>BeatDetectAndClassify (237 samples, 6.02%)</title><rect x="392.8" y="197" width="70.9" height="15.0" fill="rgb(250,204,51)" rx="2" ry="2" />
<text  x="395.75" y="207.5" >BeatDete..</text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="463.4" y="165" width="0.3" height="15.0" fill="rgb(254,191,7)" rx="2" ry="2" />
<text  x="466.43" y="175.5" ></text>
</g>
<g >
<title>usb_hcd_poll_rh_status (1 samples, 0.03%)</title><rect x="463.4" y="69" width="0.3" height="15.0" fill="rgb(215,28,22)" rx="2" ry="2" />
<text  x="466.43" y="79.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (26 samples, 0.66%)</title><rect x="1181.6" y="213" width="7.8" height="15.0" fill="rgb(243,44,16)" rx="2" ry="2" />
<text  x="1184.61" y="223.5" ></text>
</g>
<g >
<title>QRSFilter (803 samples, 20.38%)</title><rect x="131.9" y="213" width="240.5" height="15.0" fill="rgb(212,182,36)" rx="2" ry="2" />
<text  x="134.89" y="223.5" >QRSFilter</text>
</g>
<g >
<title>run_timer_softirq (1 samples, 0.03%)</title><rect x="463.4" y="117" width="0.3" height="15.0" fill="rgb(238,133,8)" rx="2" ry="2" />
<text  x="466.43" y="127.5" ></text>
</g>
<g >
<title>usb_hcd_poll_rh_status (1 samples, 0.03%)</title><rect x="593.4" y="69" width="0.3" height="15.0" fill="rgb(245,24,15)" rx="2" ry="2" />
<text  x="596.41" y="79.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="920.5" y="165" width="0.3" height="15.0" fill="rgb(219,196,32)" rx="2" ry="2" />
<text  x="923.46" y="175.5" ></text>
</g>
<g >
<title>PostClassify (6 samples, 0.15%)</title><rect x="113.9" y="213" width="1.8" height="15.0" fill="rgb(243,111,36)" rx="2" ry="2" />
<text  x="116.92" y="223.5" ></text>
</g>
<g >
<title>NoiseCheck (32 samples, 0.81%)</title><rect x="104.3" y="213" width="9.6" height="15.0" fill="rgb(231,117,17)" rx="2" ry="2" />
<text  x="107.34" y="223.5" ></text>
</g>
<g >
<title>NoiseCheck (100 samples, 2.54%)</title><rect x="607.5" y="197" width="29.9" height="15.0" fill="rgb(207,227,13)" rx="2" ry="2" />
<text  x="610.49" y="207.5" >No..</text>
</g>
<g >
<title>irq_exit (1 samples, 0.03%)</title><rect x="463.4" y="149" width="0.3" height="15.0" fill="rgb(250,49,52)" rx="2" ry="2" />
<text  x="466.43" y="159.5" ></text>
</g>
<g >
<title>[unknown] (2,701 samples, 68.55%)</title><rect x="372.7" y="213" width="808.9" height="15.0" fill="rgb(218,196,4)" rx="2" ry="2" />
<text  x="375.69" y="223.5" >[unknown]</text>
</g>
<g >
<title>rh_timer_func (1 samples, 0.03%)</title><rect x="593.4" y="85" width="0.3" height="15.0" fill="rgb(216,51,25)" rx="2" ry="2" />
<text  x="596.41" y="95.5" ></text>
</g>
<g >
<title>slowperformance (871 samples, 22.11%)</title><rect x="920.8" y="197" width="260.8" height="15.0" fill="rgb(239,227,19)" rx="2" ry="2" />
<text  x="923.76" y="207.5" >slowperformance</text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="920.5" y="181" width="0.3" height="15.0" fill="rgb(225,224,47)" rx="2" ry="2" />
<text  x="923.46" y="191.5" ></text>
</g>
<g >
<title>TempClass (1 samples, 0.03%)</title><rect x="372.4" y="213" width="0.3" height="15.0" fill="rgb(240,197,49)" rx="2" ry="2" />
<text  x="375.39" y="223.5" ></text>
</g>
<g >
<title>BeatDetectAndClassify (48 samples, 1.22%)</title><rect x="40.8" y="213" width="14.4" height="15.0" fill="rgb(241,173,12)" rx="2" ry="2" />
<text  x="43.85" y="223.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="463.4" y="181" width="0.3" height="15.0" fill="rgb(243,24,21)" rx="2" ry="2" />
<text  x="466.43" y="191.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (2 samples, 0.05%)</title><rect x="371.8" y="197" width="0.6" height="15.0" fill="rgb(249,81,33)" rx="2" ry="2" />
<text  x="374.79" y="207.5" ></text>
</g>
<g >
<title>RhythmChk (2 samples, 0.05%)</title><rect x="855.2" y="197" width="0.6" height="15.0" fill="rgb(247,150,13)" rx="2" ry="2" />
<text  x="858.17" y="207.5" ></text>
</g>
<g >
<title>rh_timer_func (1 samples, 0.03%)</title><rect x="372.1" y="101" width="0.3" height="15.0" fill="rgb(224,72,22)" rx="2" ry="2" />
<text  x="375.09" y="111.5" ></text>
</g>
<g >
<title>QRSFilter (100 samples, 2.54%)</title><rect x="824.9" y="197" width="30.0" height="15.0" fill="rgb(212,71,50)" rx="2" ry="2" />
<text  x="827.92" y="207.5" >QR..</text>
</g>
<g >
<title>GetBeatCenter (1 samples, 0.03%)</title><rect x="593.7" y="197" width="0.3" height="15.0" fill="rgb(224,51,31)" rx="2" ry="2" />
<text  x="596.71" y="207.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="593.4" y="181" width="0.3" height="15.0" fill="rgb(229,124,48)" rx="2" ry="2" />
<text  x="596.41" y="191.5" ></text>
</g>
<g >
<title>GetDominantType (2 samples, 0.05%)</title><rect x="102.8" y="213" width="0.6" height="15.0" fill="rgb(222,209,8)" rx="2" ry="2" />
<text  x="105.84" y="223.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.03%)</title><rect x="920.5" y="149" width="0.3" height="15.0" fill="rgb(224,59,30)" rx="2" ry="2" />
<text  x="923.46" y="159.5" ></text>
</g>
</g>
</svg>
